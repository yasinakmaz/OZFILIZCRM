@* Dosya Yolu: TeknikServisApp/Components/Pages/Services/ActiveServices.razor *@
@page "/services/active"
@using CRM.Services
@using CRM.Data.Models
@using CRM.Enums
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Cards
@inject ServiceManagementService ServiceManagementService
@inject AuthService AuthService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>Aktif Servisler - Teknik Servis</PageTitle>

<div class="active-services-container">
    
    @* Sayfa başlığı ve durum özeti *@
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h2 class="page-title">
                        <i class="fas fa-tools me-3 text-info"></i>
                        Aktif Servisler
                    </h2>
                    <p class="text-muted mb-0">
                        @if (AuthService.HasRole(UserRole.Technician))
                        {
                            <text>Atandığınız @totalRecords aktif servis</text>
                        }
                        else
                        {
                            <text>Toplam @totalRecords aktif servis</text>
                        }
                        @if (urgentCount > 0)
                        {
                            <span class="text-danger ms-2">• @urgentCount acil</span>
                        }
                    </p>
                </div>
                <div class="d-flex gap-2">
                    <button class="btn btn-outline-secondary" @onclick="RefreshData">
                        <i class="fas fa-sync-alt me-2"></i>
                        Yenile
                    </button>
                    @if (AuthService.IsSupervisorOrAdmin)
                    {
                        <button class="btn btn-info" @onclick="ViewAllActiveServices">
                            <i class="fas fa-list me-2"></i>
                            Tüm Aktif Servisler
                        </button>
                    }
                </div>
            </div>
        </div>
    </div>

    @* Hızlı istatistikler *@
    <div class="row mb-4">
        <div class="col-lg-3 col-md-6 col-12 mb-3">
            <div class="stats-card card border-info">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="stats-icon bg-info">
                            <i class="fas fa-play text-white"></i>
                        </div>
                        <div class="stats-content">
                            <h4 class="stats-number">@totalRecords</h4>
                            <p class="stats-label">Aktif Servis</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-lg-3 col-md-6 col-12 mb-3">
            <div class="stats-card card border-warning">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="stats-icon bg-warning">
                            <i class="fas fa-exclamation text-white"></i>
                        </div>
                        <div class="stats-content">
                            <h4 class="stats-number">@urgentCount</h4>
                            <p class="stats-label">Acil Servis</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-lg-3 col-md-6 col-12 mb-3">
            <div class="stats-card card border-success">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="stats-icon bg-success">
                            <i class="fas fa-tasks text-white"></i>
                        </div>
                        <div class="stats-content">
                            <h4 class="stats-number">@completedTasksToday</h4>
                            <p class="stats-label">Bugün Tamamlanan Görev</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-lg-3 col-md-6 col-12 mb-3">
            <div class="stats-card card border-primary">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="stats-icon bg-primary">
                            <i class="fas fa-clock text-white"></i>
                        </div>
                        <div class="stats-content">
                            <h4 class="stats-number">@avgHoursPerService.ToString("F1")</h4>
                            <p class="stats-label">Ort. Süre (Saat)</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @* Filtreleme araçları *@
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-body py-3">
                    <div class="d-flex flex-wrap gap-3 align-items-center">
                        <div class="quick-filter">
                            <label class="form-label mb-1">Öncelik:</label>
                            <div class="btn-group" role="group">
                                <input type="radio" class="btn-check" name="priorityFilter" id="allPriority" 
                                       checked="@(currentPriorityFilter == null)" 
                                       @onchange="() => ChangePriorityFilter(null)" />
                                <label class="btn btn-outline-secondary" for="allPriority">
                                    Tümü
                                </label>

                                <input type="radio" class="btn-check" name="priorityFilter" id="critical" 
                                       checked="@(currentPriorityFilter == Priority.Critical)" 
                                       @onchange="() => ChangePriorityFilter(Priority.Critical)" />
                                <label class="btn btn-outline-danger" for="critical">
                                    Kritik
                                </label>

                                <input type="radio" class="btn-check" name="priorityFilter" id="high" 
                                       checked="@(currentPriorityFilter == Priority.High)" 
                                       @onchange="() => ChangePriorityFilter(Priority.High)" />
                                <label class="btn btn-outline-warning" for="high">
                                    Yüksek
                                </label>
                            </div>
                        </div>

                        <div class="vr"></div>

                        @if (AuthService.IsSupervisorOrAdmin)
                        {
                            <div class="quick-filter">
                                <label class="form-label mb-1">Görünüm:</label>
                                <div class="btn-group" role="group">
                                    <input type="radio" class="btn-check" name="viewFilter" id="myServices" 
                                           checked="@(!showAllServices)" 
                                           @onchange="() => ToggleViewFilter(false)" />
                                    <label class="btn btn-outline-info" for="myServices">
                                        Benim Servislerim
                                    </label>

                                    <input type="radio" class="btn-check" name="viewFilter" id="allServices" 
                                           checked="@(showAllServices)" 
                                           @onchange="() => ToggleViewFilter(true)" />
                                    <label class="btn btn-outline-primary" for="allServices">
                                        Tüm Servisler
                                    </label>
                                </div>
                            </div>

                            <div class="vr"></div>
                        }

                        <div class="quick-filter">
                            <label class="form-label mb-1">Arama:</label>
                            <div class="input-group" style="width: 250px;">
                                <span class="input-group-text">
                                    <i class="fas fa-search"></i>
                                </span>
                                <input type="text" class="form-control" 
                                       placeholder="Müşteri adı, servis #..." 
                                       @bind="searchTerm" 
                                       @onkeypress="OnSearchKeyPress" />
                                @if (!string.IsNullOrEmpty(searchTerm))
                                {
                                    <button class="btn btn-outline-secondary" @onclick="ClearSearch">
                                        <i class="fas fa-times"></i>
                                    </button>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @* Ana servis listesi *@
    <div class="row">
        <div class="col-12">
            @if (isLoading)
            {
                <div class="text-center py-5">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Yükleniyor...</span>
                    </div>
                    <div class="mt-3">
                        <p class="text-muted">Aktif servisler yükleniyor...</p>
                    </div>
                </div>
            }
            else if (!services.Any())
            {
                <div class="card">
                    <div class="card-body text-center py-5">
                        <i class="fas fa-check-circle fa-4x text-success mb-3"></i>
                        <h5 class="text-success">Harika!</h5>
                        <p class="text-muted">
                            @if (!string.IsNullOrEmpty(searchTerm))
                            {
                                <text>Arama kriterlerinize uygun aktif servis bulunamadı.</text>
                            }
                            else
                            {
                                <text>Şu anda aktif servisiniz bulunmuyor.</text>
                            }
                        </p>
                    </div>
                </div>
            }
            else
            {
                @* Kart görünümü - Mobile friendly *@
                <div class="d-lg-none">
                    @foreach (var service in services)
                    {
                        <div class="card mb-3 service-card @GetServiceCardClass(service)">
                            <div class="card-body">
                                <div class="d-flex justify-content-between align-items-start mb-2">
                                    <div>
                                        <h6 class="card-title mb-1">
                                            <strong class="text-primary">#@service.Id</strong>
                                            @if (HasCriticalTasks(service))
                                            {
                                                <span class="badge bg-danger ms-2">KRİTİK</span>
                                            }
                                            else if (HasHighPriorityTasks(service))
                                            {
                                                <span class="badge bg-warning text-dark ms-2">YÜKSEKâ</span>
                                            }
                                        </h6>
                                        <p class="card-text mb-1">
                                            <strong>@service.Customer.CompanyName</strong>
                                        </p>
                                        <small class="text-muted">@service.Customer.AuthorizedPersonName</small>
                                    </div>
                                    <div class="dropdown">
                                        <button class="btn btn-sm btn-outline-secondary dropdown-toggle" 
                                               type="button" data-bs-toggle="dropdown">
                                            <i class="fas fa-ellipsis-v"></i>
                                        </button>
                                        <ul class="dropdown-menu">
                                            <li><a class="dropdown-item" @onclick="() => ViewService(service.Id)">
                                                <i class="fas fa-eye me-2"></i>Detaylar
                                            </a></li>
                                            <li><a class="dropdown-item" @onclick="() => EditService(service.Id)">
                                                <i class="fas fa-edit me-2"></i>Düzenle
                                            </a></li>
                                            @if (AuthService.IsSupervisorOrAdmin)
                                            {
                                                <li><hr class="dropdown-divider"></li>
                                                <li><a class="dropdown-item text-warning" @onclick="() => CompleteService(service.Id)">
                                                    <i class="fas fa-check me-2"></i>Tamamla
                                                </a></li>
                                            }
                                        </ul>
                                    </div>
                                </div>
                                
                                <div class="row g-2 mb-3">
                                    <div class="col-6">
                                        <small class="text-muted">Başlangıç:</small>
                                        <div>@(service.ServiceStartDateTime?.ToString("dd.MM.yyyy HH:mm") ?? "Başlanmamış")</div>
                                    </div>
                                    <div class="col-6">
                                        <small class="text-muted">Tutar:</small>
                                        <div>
                                            @if (service.ServiceAmount.HasValue)
                                            {
                                                <strong class="text-success">
                                                    @service.ServiceAmount.Value.ToString("C", new System.Globalization.CultureInfo("tr-TR"))
                                                </strong>
                                            }
                                            else
                                            {
                                                <span class="text-muted">Belirtilmemiş</span>
                                            }
                                        </div>
                                    </div>
                                </div>

                                @* Görev ilerlemesi *@
                                @if (service.ServiceTasks.Any())
                                {
                                    var totalTasks = service.ServiceTasks.Count;
                                    var completedTasks = service.ServiceTasks.Count(t => t.IsCompleted);
                                    var completionPercentage = (double)completedTasks / totalTasks * 100;
                                    
                                    <div class="mb-3">
                                        <div class="d-flex justify-content-between align-items-center mb-1">
                                            <small class="text-muted">Görev İlerlemesi</small>
                                            <small class="@(completedTasks == totalTasks ? "text-success" : "text-muted")">
                                                @completedTasks/@totalTasks
                                            </small>
                                        </div>
                                        <div class="progress" style="height: 6px;">
                                            <div class="progress-bar @(completedTasks == totalTasks ? "bg-success" : "bg-info")" 
                                                 style="width: @(completionPercentage)%"></div>
                                        </div>
                                    </div>
                                }

                                @* Atanmış kullanıcılar *@
                                @if (service.ServiceUsers.Any(su => su.IsActive))
                                {
                                    <div class="assigned-users">
                                        <small class="text-muted">Atanmış Personel:</small>
                                        <div class="d-flex flex-wrap gap-1 mt-1">
                                            @foreach (var su in service.ServiceUsers.Where(su => su.IsActive))
                                            {
                                                <span class="badge bg-light text-dark">
                                                    <i class="fas fa-user me-1"></i>
                                                    @su.User.Username
                                                </span>
                                            }
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                </div>

                @* Tablo görünümü - Desktop *@
                <div class="d-none d-lg-block">
                    <div class="card">
                        <div class="card-body">
                            <SfGrid DataSource="@services" 
                                   AllowPaging="true" 
                                   AllowSorting="true"
                                   AllowResizing="true"
                                   GridLines="GridLine.Both"
                                   Height="700">
                                
                                <GridPageSettings PageSize="@pageSize" PageCount="5" />
                                
                                <GridColumns>
                                    <GridColumn Field="@nameof(Service.Id)" 
                                              HeaderText="Servis #" 
                                              Width="100"
                                              AllowSorting="true">
                                        <Template>
                                            @{
                                                var service = context as Service;
                                            }
                                            <div class="d-flex align-items-center">
                                                <strong class="text-primary">#@service!.Id</strong>
                                                @if (HasCriticalTasks(service))
                                                {
                                                    <i class="fas fa-exclamation-triangle text-danger ms-2" title="Kritik görevler var"></i>
                                                }
                                                else if (HasHighPriorityTasks(service))
                                                {
                                                    <i class="fas fa-exclamation text-warning ms-2" title="Yüksek öncelikli görevler var"></i>
                                                }
                                            </div>
                                        </Template>
                                    </GridColumn>
                                    
                                    <GridColumn Field="@nameof(Service.Customer.CompanyName)" 
                                              HeaderText="Müşteri" 
                                              Width="200"
                                              AllowSorting="true">
                                        <Template>
                                            @{
                                                var service = context as Service;
                                            }
                                            <div>
                                                <strong>@service!.Customer.CompanyName</strong>
                                                <br />
                                                <small class="text-muted">@service.Customer.AuthorizedPersonName</small>
                                            </div>
                                        </Template>
                                    </GridColumn>
                                    
                                    <GridColumn Field="@nameof(Service.ServiceStartDateTime)" 
                                              HeaderText="Başlangıç" 
                                              Width="150"
                                              AllowSorting="true">
                                        <Template>
                                            @{
                                                var service = context as Service;
                                            }
                                            @if (service!.ServiceStartDateTime.HasValue)
                                            {
                                                <div>
                                                    @service.ServiceStartDateTime.Value.ToString("dd.MM.yyyy")
                                                    <br />
                                                    <small class="text-muted">@service.ServiceStartDateTime.Value.ToString("HH:mm")</small>
                                                </div>
                                            }
                                            else
                                            {
                                                <span class="text-muted">Başlanmamış</span>
                                            }
                                        </Template>
                                    </GridColumn>
                                    
                                    <GridColumn HeaderText="Atanmış Personel" 
                                              Width="150" 
                                              AllowSorting="false">
                                        <Template>
                                            @{
                                                var service = context as Service;
                                                var assignedUsers = service!.ServiceUsers.Where(su => su.IsActive).ToList();
                                            }
                                            @if (assignedUsers.Any())
                                            {
                                                <div class="d-flex flex-wrap gap-1">
                                                    @foreach (var su in assignedUsers.Take(2))
                                                    {
                                                        <span class="badge bg-primary">@su.User.Username</span>
                                                    }
                                                    @if (assignedUsers.Count > 2)
                                                    {
                                                        <span class="badge bg-secondary">+@(assignedUsers.Count - 2)</span>
                                                    }
                                                </div>
                                            }
                                            else
                                            {
                                                <span class="text-muted">Atanmamış</span>
                                            }
                                        </Template>
                                    </GridColumn>
                                    
                                    <GridColumn HeaderText="Görev İlerlemesi" 
                                              Width="150" 
                                              AllowSorting="false">
                                        <Template>
                                            @{
                                                var service = context as Service;
                                                var totalTasks = service!.ServiceTasks.Count;
                                                var completedTasks = service.ServiceTasks.Count(t => t.IsCompleted);
                                            }
                                            @if (totalTasks > 0)
                                            {
                                                <div class="task-progress">
                                                    <div class="d-flex justify-content-between align-items-center mb-1">
                                                        <small class="@(completedTasks == totalTasks ? "text-success" : "text-muted")">
                                                            @completedTasks/@totalTasks
                                                        </small>
                                                        <small class="text-muted">
                                                            @((double)completedTasks / totalTasks * 100:F0)%
                                                        </small>
                                                    </div>
                                                    <div class="progress" style="height: 4px;">
                                                        <div class="progress-bar @(completedTasks == totalTasks ? "bg-success" : "bg-info")" 
                                                             style="width: @((double)completedTasks / totalTasks * 100)%"></div>
                                                    </div>
                                                </div>
                                            }
                                            else
                                            {
                                                <span class="text-muted">Görev yok</span>
                                            }
                                        </Template>
                                    </GridColumn>
                                    
                                    <GridColumn Field="@nameof(Service.ServiceAmount)" 
                                              HeaderText="Tutar" 
                                              Width="120">
                                        <Template>
                                            @{
                                                var service = context as Service;
                                            }
                                            @if (service!.ServiceAmount.HasValue)
                                            {
                                                <strong class="text-success">
                                                    @service.ServiceAmount.Value.ToString("C", new System.Globalization.CultureInfo("tr-TR"))
                                                </strong>
                                            }
                                            else
                                            {
                                                <span class="text-muted">Belirtilmemiş</span>
                                            }
                                        </Template>
                                    </GridColumn>
                                    
                                    <GridColumn HeaderText="İşlemler" 
                                              Width="150" 
                                              AllowSorting="false">
                                        <Template>
                                            @{
                                                var service = context as Service;
                                            }
                                            <div class="btn-group btn-group-sm">
                                                <button class="btn btn-outline-primary" 
                                                       @onclick="() => ViewService(service!.Id)"
                                                       title="Detayları Görüntüle">
                                                    <i class="fas fa-eye"></i>
                                                </button>
                                                
                                                <button class="btn btn-outline-secondary" 
                                                       @onclick="() => EditService(service!.Id)"
                                                       title="Düzenle">
                                                    <i class="fas fa-edit"></i>
                                                </button>
                                                
                                                @if (AuthService.IsSupervisorOrAdmin)
                                                {
                                                    <button class="btn btn-outline-warning" 
                                                           @onclick="() => CompleteService(service!.Id)"
                                                           title="Servisi Tamamla">
                                                        <i class="fas fa-check"></i>
                                                    </button>
                                                }
                                            </div>
                                        </Template>
                                    </GridColumn>
                                </GridColumns>
                            </SfGrid>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    // Component state
    private bool isLoading = true;
    private IEnumerable<Service> services = new List<Service>();
    private int totalRecords = 0;
    private int urgentCount = 0;
    private int completedTasksToday = 0;
    private double avgHoursPerService = 0;
    private int pageSize = 15;
    private string searchTerm = string.Empty;
    private Priority? currentPriorityFilter = null;
    private bool showAllServices = false;

    protected override async Task OnInitializedAsync()
    {
        // Teknisyenler varsayılan olarak sadece kendi servislerini görür
        showAllServices = !AuthService.HasRole(UserRole.Technician);
        await LoadServices();
    }

    private async Task LoadServices()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            // Aktif servisleri getir
            var (serviceData, total) = await ServiceManagementService.GetServicesPagedAsync(
                1, 1000, ServiceStatus.InProgress, null, 
                GetCurrentUserId(), searchTerm);

            var allServices = serviceData.ToList();

            // Priority filter uygula
            if (currentPriorityFilter.HasValue)
            {
                allServices = allServices.Where(s => 
                    s.ServiceTasks.Any(t => !t.IsCompleted && t.Priority == currentPriorityFilter.Value))
                    .ToList();
            }

            services = allServices;
            totalRecords = allServices.Count;
            
            // İstatistikleri hesapla
            CalculateStatistics(allServices);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Aktif servis yükleme hatası: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private int? GetCurrentUserId()
    {
        if (showAllServices || AuthService.IsAdmin)
            return null;
        
        return AuthService.CurrentUser?.Id;
    }

    private void CalculateStatistics(List<Service> allServices)
    {
        urgentCount = allServices.Count(s => 
            s.ServiceTasks.Any(t => !t.IsCompleted && 
                (t.Priority == Priority.Critical || t.Priority == Priority.High)));

        var today = DateTime.Today;
        completedTasksToday = allServices.SelectMany(s => s.ServiceTasks)
            .Count(t => t.IsCompleted && t.CompletedDate.HasValue && 
                       t.CompletedDate.Value.Date == today);

        if (allServices.Any(s => s.ServiceStartDateTime.HasValue))
        {
            var servicesWithHours = allServices
                .Where(s => s.ServiceStartDateTime.HasValue)
                .Select(s => (DateTime.Now - s.ServiceStartDateTime!.Value).TotalHours)
                .ToList();
                
            avgHoursPerService = servicesWithHours.Any() ? servicesWithHours.Average() : 0;
        }
    }

    private async Task ChangePriorityFilter(Priority? priority)
    {
        currentPriorityFilter = priority;
        await LoadServices();
    }

    private async Task ToggleViewFilter(bool showAll)
    {
        showAllServices = showAll;
        await LoadServices();
    }

    private async Task OnSearchKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await LoadServices();
        }
    }

    private async Task ClearSearch()
    {
        searchTerm = string.Empty;
        await LoadServices();
    }

    private async Task RefreshData()
    {
        await LoadServices();
    }

    private void ViewService(int serviceId)
    {
        NavigationManager.NavigateTo($"/services/{serviceId}");
    }

    private void EditService(int serviceId)
    {
        NavigationManager.NavigateTo($"/services/{serviceId}/edit");
    }

    private void ViewAllActiveServices()
    {
        showAllServices = true;
        LoadServices();
    }

    private async Task CompleteService(int serviceId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
            "Bu servisi tamamlamak istediğinizden emin misiniz? Onay beklemede durumuna geçecektir.");
        
        if (!confirmed) return;

        try
        {
            var result = await ServiceManagementService.ChangeServiceStatusAsync(
                serviceId, ServiceStatus.WaitingApproval, AuthService.CurrentUser!.Id, "Servis tamamlandı");
            
            if (result.IsSuccess)
            {
                await RefreshData();
                await JSRuntime.InvokeVoidAsync("alert", "Servis tamamlandı ve onay beklemede durumuna geçti.");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", result.ErrorMessage);
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", "İşlem sırasında bir hata oluştu.");
        }
    }

    // Helper metodları
    private bool HasCriticalTasks(Service service)
    {
        return service.ServiceTasks.Any(t => !t.IsCompleted && t.Priority == Priority.Critical);
    }

    private bool HasHighPriorityTasks(Service service)
    {
        return service.ServiceTasks.Any(t => !t.IsCompleted && t.Priority == Priority.High);
    }

    private string GetServiceCardClass(Service service)
    {
        if (HasCriticalTasks(service))
            return "border-danger";
        if (HasHighPriorityTasks(service))
            return "border-warning";
        return "";
    }
}