@page "/services/pending"
@using TeknikServisApp.Services
@using TeknikServisApp.Data.Models
@using TeknikServisApp.Enums
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Inputs
@inject ServiceManagementService ServiceManagementService
@inject AuthService AuthService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>Bekleyen Servisler - Teknik Servis</PageTitle>

<div class="pending-services-container">
    
    @* Sayfa başlığı ve aksiyon butonları *@
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h2 class="page-title">
                        <i class="fas fa-clock me-3 text-warning"></i>
                        Bekleyen Servisler
                    </h2>
                    <p class="text-muted mb-0">
                        Toplam @totalRecords bekleyen servis
                        @if (overdueCount > 0)
                        {
                            <span class="text-danger ms-2">• @overdueCount geciken</span>
                        }
                    </p>
                </div>
                <div class="d-flex gap-2">
                    @if (AuthService.IsSupervisorOrAdmin)
                    {
                        <button class="btn btn-primary" @onclick="CreateNewService">
                            <i class="fas fa-plus me-2"></i>
                            Yeni Servis
                        </button>
                    }
                    <button class="btn btn-outline-secondary" @onclick="RefreshData">
                        <i class="fas fa-sync-alt me-2"></i>
                        Yenile
                    </button>
                </div>
            </div>
        </div>
    </div>

    @* Hızlı filtreler *@
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-body py-3">
                    <div class="d-flex flex-wrap gap-3 align-items-center">
                        <div class="quick-filter">
                            <label class="form-label mb-1">Görünüm:</label>
                            <div class="btn-group" role="group">
                                <input type="radio" class="btn-check" name="viewFilter" id="all" 
                                       checked="@(currentFilter == ServiceFilter.All)" 
                                       @onchange="() => ChangeFilter(ServiceFilter.All)" />
                                <label class="btn btn-outline-primary" for="all">
                                    Tümü (@totalRecords)
                                </label>

                                <input type="radio" class="btn-check" name="viewFilter" id="overdue" 
                                       checked="@(currentFilter == ServiceFilter.Overdue)" 
                                       @onchange="() => ChangeFilter(ServiceFilter.Overdue)" />
                                <label class="btn btn-outline-danger" for="overdue">
                                    Geciken (@overdueCount)
                                </label>

                                <input type="radio" class="btn-check" name="viewFilter" id="today" 
                                       checked="@(currentFilter == ServiceFilter.Today)" 
                                       @onchange="() => ChangeFilter(ServiceFilter.Today)" />
                                <label class="btn btn-outline-info" for="today">
                                    Bugün (@todayCount)
                                </label>
                            </div>
                        </div>

                        <div class="vr"></div>

                        <div class="quick-filter">
                            <label class="form-label mb-1">Arama:</label>
                            <div class="input-group" style="width: 250px;">
                                <span class="input-group-text">
                                    <i class="fas fa-search"></i>
                                </span>
                                <input type="text" class="form-control" 
                                       placeholder="Müşteri adı, servis #..." 
                                       @bind="searchTerm" 
                                       @onkeypress="OnSearchKeyPress" />
                                @if (!string.IsNullOrEmpty(searchTerm))
                                {
                                    <button class="btn btn-outline-secondary" @onclick="ClearSearch">
                                        <i class="fas fa-times"></i>
                                    </button>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @* Ana servis listesi *@
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    @if (isLoading)
                    {
                        <div class="text-center py-5">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Yükleniyor...</span>
                            </div>
                            <div class="mt-3">
                                <p class="text-muted">Bekleyen servisler yükleniyor...</p>
                            </div>
                        </div>
                    }
                    else if (!services.Any())
                    {
                        <div class="text-center py-5">
                            <i class="fas fa-clipboard-list fa-4x text-muted mb-3"></i>
                            <h5 class="text-muted">Bekleyen servis bulunamadı</h5>
                            <p class="text-muted">
                                @if (!string.IsNullOrEmpty(searchTerm))
                                {
                                    <text>Arama kriterlerinize uygun servis bulunamadı.</text>
                                }
                                else
                                {
                                    <text>Harika! Bekleyen servisiniz bulunmuyor.</text>
                                }
                            </p>
                            @if (AuthService.IsSupervisorOrAdmin && string.IsNullOrEmpty(searchTerm))
                            {
                                <button class="btn btn-primary" @onclick="CreateNewService">
                                    <i class="fas fa-plus me-2"></i>
                                    Yeni Servis Oluştur
                                </button>
                            }
                        </div>
                    }
                    else
                    {
                        <SfGrid DataSource="@services" 
                               AllowPaging="true" 
                               AllowSorting="true"
                               AllowResizing="true"
                               GridLines="GridLine.Both"
                               Height="700">
                            
                            <GridPageSettings PageSize="@pageSize" PageCount="5" />
                            
                            <GridColumns>
                                <GridColumn Field="@nameof(Service.Id)" 
                                          HeaderText="Servis #" 
                                          Width="100"
                                          AllowSorting="true">
                                    <Template>
                                        @{
                                            var service = context as Service;
                                        }
                                        <strong class="text-primary">#@service!.Id</strong>
                                    </Template>
                                </GridColumn>
                                
                                <GridColumn Field="@nameof(Service.Customer.CompanyName)" 
                                          HeaderText="Müşteri" 
                                          Width="200"
                                          AllowSorting="true">
                                    <Template>
                                        @{
                                            var service = context as Service;
                                        }
                                        <div class="d-flex align-items-center">
                                            <div class="me-2">
                                                @if (service!.Customer.CompanyType == CompanyType.Corporate)
                                                {
                                                    <i class="fas fa-building text-primary"></i>
                                                }
                                                else
                                                {
                                                    <i class="fas fa-user text-info"></i>
                                                }
                                            </div>
                                            <div>
                                                <strong>@service.Customer.CompanyName</strong>
                                                <br />
                                                <small class="text-muted">@service.Customer.AuthorizedPersonName</small>
                                            </div>
                                        </div>
                                    </Template>
                                </GridColumn>
                                
                                <GridColumn Field="@nameof(Service.ScheduledDateTime)" 
                                          HeaderText="Planlanan Tarih" 
                                          Width="150"
                                          AllowSorting="true">
                                    <Template>
                                        @{
                                            var service = context as Service;
                                            var isOverdue = service!.ScheduledDateTime < DateTime.Now;
                                            var isToday = service.ScheduledDateTime.Date == DateTime.Today;
                                        }
                                        <div class="@(isOverdue ? "text-danger" : isToday ? "text-warning" : "")">
                                            <div>
                                                <i class="fas fa-calendar me-1"></i>
                                                @service.ScheduledDateTime.ToString("dd.MM.yyyy")
                                            </div>
                                            <div>
                                                <i class="fas fa-clock me-1"></i>
                                                @service.ScheduledDateTime.ToString("HH:mm")
                                            </div>
                                            @if (isOverdue)
                                            {
                                                <small class="badge bg-danger">GECİKEN</small>
                                            }
                                            else if (isToday)
                                            {
                                                <small class="badge bg-warning text-dark">BUGÜN</small>
                                            }
                                        </div>
                                    </Template>
                                </GridColumn>
                                
                                <GridColumn Field="@nameof(Service.CreatedDate)" 
                                          HeaderText="Oluşturulma" 
                                          Width="120"
                                          AllowSorting="true">
                                    <Template>
                                        @{
                                            var service = context as Service;
                                        }
                                        <div>
                                            @service!.CreatedDate.ToString("dd.MM.yyyy")
                                            <br />
                                            <small class="text-muted">@service.CreatedByUser.Username</small>
                                        </div>
                                    </Template>
                                </GridColumn>
                                
                                <GridColumn Field="@nameof(Service.ServiceAmount)" 
                                          HeaderText="Tutar" 
                                          Width="100">
                                    <Template>
                                        @{
                                            var service = context as Service;
                                        }
                                        @if (service!.ServiceAmount.HasValue)
                                        {
                                            <strong class="text-success">
                                                @service.ServiceAmount.Value.ToString("C", new System.Globalization.CultureInfo("tr-TR"))
                                            </strong>
                                        }
                                        else
                                        {
                                            <span class="text-muted">Belirtilmemiş</span>
                                        }
                                    </Template>
                                </GridColumn>
                                
                                <GridColumn HeaderText="Görevler" 
                                          Width="100" 
                                          AllowSorting="false">
                                    <Template>
                                        @{
                                            var service = context as Service;
                                            var totalTasks = service!.ServiceTasks.Count;
                                            var completedTasks = service.ServiceTasks.Count(t => t.IsCompleted);
                                        }
                                        @if (totalTasks > 0)
                                        {
                                            <div class="task-progress">
                                                <small class="@(completedTasks == totalTasks ? "text-success" : "text-muted")">
                                                    @completedTasks/@totalTasks
                                                </small>
                                                <div class="progress mt-1" style="height: 4px;">
                                                    <div class="progress-bar" 
                                                         style="width: @((double)completedTasks / totalTasks * 100)%"></div>
                                                </div>
                                            </div>
                                        }
                                        else
                                        {
                                            <span class="text-muted">-</span>
                                        }
                                    </Template>
                                </GridColumn>
                                
                                <GridColumn HeaderText="İşlemler" 
                                          Width="150" 
                                          AllowSorting="false">
                                    <Template>
                                        @{
                                            var service = context as Service;
                                        }
                                        <div class="btn-group btn-group-sm">
                                            <button class="btn btn-outline-primary" 
                                                   @onclick="() => ViewService(service!.Id)"
                                                   title="Detayları Görüntüle">
                                                <i class="fas fa-eye"></i>
                                            </button>
                                            
                                            @if (AuthService.IsSupervisorOrAdmin)
                                            {
                                                <button class="btn btn-outline-secondary" 
                                                       @onclick="() => EditService(service!.Id)"
                                                       title="Düzenle">
                                                    <i class="fas fa-edit"></i>
                                                </button>
                                                
                                                <button class="btn btn-outline-success" 
                                                       @onclick="() => StartService(service!.Id)"
                                                       title="Servise Başla">
                                                    <i class="fas fa-play"></i>
                                                </button>
                                                
                                                <button class="btn btn-outline-warning" 
                                                       @onclick="() => AssignUsers(service!.Id)"
                                                       title="Kullanıcı Ata">
                                                    <i class="fas fa-user-plus"></i>
                                                </button>
                                            }
                                        </div>
                                    </Template>
                                </GridColumn>
                            </GridColumns>
                        </SfGrid>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    // Component state
    private bool isLoading = true;
    private IEnumerable<Service> services = new List<Service>();
    private int totalRecords = 0;
    private int overdueCount = 0;
    private int todayCount = 0;
    private int pageSize = 15;
    private string searchTerm = string.Empty;
    private ServiceFilter currentFilter = ServiceFilter.All;

    // Filter enum
    private enum ServiceFilter
    {
        All,
        Overdue,
        Today
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadServices();
    }

    private async Task LoadServices()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            // Bekleyen servisleri getir
            var (serviceData, total) = await ServiceManagementService.GetServicesPagedAsync(
                1, 1000, ServiceStatus.Pending, null, null, searchTerm);

            var allServices = serviceData.ToList();

            // Filter uygula
            var filteredServices = ApplyCurrentFilter(allServices);
            
            services = filteredServices;
            totalRecords = allServices.Count;
            
            // İstatistikleri hesapla
            var now = DateTime.Now;
            overdueCount = allServices.Count(s => s.ScheduledDateTime < now);
            todayCount = allServices.Count(s => s.ScheduledDateTime.Date == DateTime.Today);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Servis yükleme hatası: {ex.Message}");
            // Hata mesajı gösterimi eklenebilir
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private IEnumerable<Service> ApplyCurrentFilter(List<Service> allServices)
    {
        return currentFilter switch
        {
            ServiceFilter.Overdue => allServices.Where(s => s.ScheduledDateTime < DateTime.Now),
            ServiceFilter.Today => allServices.Where(s => s.ScheduledDateTime.Date == DateTime.Today),
            _ => allServices
        };
    }

    private async Task ChangeFilter(ServiceFilter filter)
    {
        currentFilter = filter;
        await LoadServices();
    }

    private async Task OnSearchKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await LoadServices();
        }
    }

    private async Task ClearSearch()
    {
        searchTerm = string.Empty;
        await LoadServices();
    }

    private async Task RefreshData()
    {
        await LoadServices();
    }

    private void CreateNewService()
    {
        NavigationManager.NavigateTo("/services/new");
    }

    private void ViewService(int serviceId)
    {
        NavigationManager.NavigateTo($"/services/{serviceId}");
    }

    private void EditService(int serviceId)
    {
        NavigationManager.NavigateTo($"/services/{serviceId}/edit");
    }

    private async Task StartService(int serviceId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
            "Bu servise başlamak istediğinizden emin misiniz?");
        
        if (!confirmed) return;

        try
        {
            var result = await ServiceManagementService.ChangeServiceStatusAsync(
                serviceId, ServiceStatus.InProgress, AuthService.CurrentUser!.Id, "Servis başlatıldı");
            
            if (result.IsSuccess)
            {
                await RefreshData();
                await JSRuntime.InvokeVoidAsync("alert", "Servis başarıyla başlatıldı.");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", result.ErrorMessage);
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", "İşlem sırasında bir hata oluştu.");
        }
    }

    private void AssignUsers(int serviceId)
    {
        // User assignment modal'ı açılacak (ilerleyen aşamada implement edilecek)
        NavigationManager.NavigateTo($"/services/{serviceId}/assign-users");
    }
}