@page "/customers/new"
@page "/customers/{customerId:int}/edit"
@using CRM.Services
@using CRM.DTOs
@using CRM.Enums
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Buttons
@inject CustomerService CustomerService
@inject AuthService AuthService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>@(IsEditMode ? "Müşteri Düzenle" : "Yeni Müşteri") - Teknik Servis</PageTitle>

<div class="customer-form-container">
    
    @* Sayfa başlığı ve navigasyon *@
    <div class="row mb-4">
        <div class="col-12">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item">
                        <a href="/customers">Müşteriler</a>
                    </li>
                    <li class="breadcrumb-item active">
                        @(IsEditMode ? "Düzenle" : "Yeni Müşteri")
                    </li>
                </ol>
            </nav>
            
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h2 class="page-title">
                        <i class="fas fa-@(IsEditMode ? "edit" : "plus") me-3 text-primary"></i>
                        @(IsEditMode ? "Müşteri Düzenle" : "Yeni Müşteri Ekle")
                    </h2>
                    @if (IsEditMode && !string.IsNullOrEmpty(customerModel.CompanyName))
                    {
                        <p class="text-muted mb-0">@customerModel.CompanyName</p>
                    }
                </div>
                <div>
                    <button class="btn btn-outline-secondary" @onclick="GoBack">
                        <i class="fas fa-arrow-left me-2"></i>
                        Geri Dön
                    </button>
                </div>
            </div>
        </div>
    </div>

    @* Ana form alanı *@
    <div class="row">
        <div class="col-lg-8 col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-info-circle me-2"></i>
                        Müşteri Bilgileri
                    </h5>
                </div>
                <div class="card-body">
                    
                    @if (isLoading)
                    {
                        <div class="text-center py-5">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Yükleniyor...</span>
                            </div>
                            <div class="mt-3">
                                <p class="text-muted">Müşteri bilgileri yükleniyor...</p>
                            </div>
                        </div>
                    }
                    else
                    {
                        <EditForm Model="@customerModel" OnValidSubmit="@HandleSubmit" FormName="CustomerForm">
                            <DataAnnotationsValidator />
                            
                            @* Hata ve başarı mesajları *@
                            @if (!string.IsNullOrEmpty(errorMessage))
                            {
                                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                                    <i class="fas fa-exclamation-triangle me-2"></i>
                                    @errorMessage
                                    <button type="button" class="btn-close" @onclick="ClearMessage"></button>
                                </div>
                            }
                            
                            @if (!string.IsNullOrEmpty(successMessage))
                            {
                                <div class="alert alert-success alert-dismissible fade show" role="alert">
                                    <i class="fas fa-check-circle me-2"></i>
                                    @successMessage
                                    <button type="button" class="btn-close" @onclick="ClearMessage"></button>
                                </div>
                            }

                            <div class="row g-3">
                                @* Firma tipi seçimi *@
                                <div class="col-12">
                                    <label class="form-label required">
                                        <i class="fas fa-tag me-1"></i>
                                        Firma Tipi
                                    </label>
                                    <SfDropDownList TValue="CompanyType" TItem="CompanyTypeOption" 
                                                  @bind-Value="customerModel.CompanyType"
                                                  DataSource="@companyTypeOptions"
                                                  Placeholder="Firma tipini seçiniz">
                                        <DropDownListFieldSettings Text="Text" Value="Value" />
                                        <DropDownListEvents TValue="CompanyType" TItem="CompanyTypeOption" 
                                                          ValueChange="OnCompanyTypeChanged" />
                                    </SfDropDownList>
                                    <ValidationMessage For="@(() => customerModel.CompanyType)" class="text-danger small mt-1" />
                                </div>

                                @* Firma adı *@
                                <div class="col-md-8">
                                    <label class="form-label required">
                                        <i class="fas fa-building me-1"></i>
                                        @(customerModel.CompanyType == CompanyType.Individual ? "Ad Soyad" : "Firma Adı")
                                    </label>
                                    <SfTextBox @bind-Value="customerModel.CompanyName"
                                             Placeholder="@(customerModel.CompanyType == CompanyType.Individual ? "Müşteri adını giriniz" : "Firma adını giriniz")"
                                             Enabled="@(!isSaving)"
                                             FloatLabelType="FloatLabelType.Never" />
                                    <ValidationMessage For="@(() => customerModel.CompanyName)" class="text-danger small mt-1" />
                                </div>

                                @* Aktif durumu - sadece düzenleme modunda *@
                                @if (IsEditMode)
                                {
                                    <div class="col-md-4">
                                        <label class="form-label">
                                            <i class="fas fa-toggle-on me-1"></i>
                                            Durum
                                        </label>
                                        <div class="form-check form-switch mt-2">
                                            <input class="form-check-input" type="checkbox" 
                                                   @bind="customerModel.IsActive" 
                                                   disabled="@isSaving" />
                                            <label class="form-check-label">
                                                @(customerModel.IsActive ? "Aktif" : "Pasif")
                                            </label>
                                        </div>
                                    </div>
                                }

                                @* Vergi numarası/TCKN *@
                                <div class="col-md-6">
                                    <label class="form-label required">
                                        <i class="fas fa-id-card me-1"></i>
                                        @(customerModel.CompanyType == CompanyType.Individual ? "TCKN" : "Vergi Numarası")
                                    </label>
                                    <SfTextBox @bind-Value="customerModel.TaxNumber"
                                             Placeholder="@(customerModel.CompanyType == CompanyType.Individual ? "11 haneli TCKN" : "10 haneli vergi numarası")"
                                             Enabled="@(!isSaving)"
                                             FloatLabelType="FloatLabelType.Never" />
                                    <ValidationMessage For="@(() => customerModel.TaxNumber)" class="text-danger small mt-1" />
                                    <small class="form-text text-muted">
                                        @(customerModel.CompanyType == CompanyType.Individual ? "Sadece rakam giriniz" : "Sadece rakam giriniz")
                                    </small>
                                </div>

                                @* Vergi dairesi - sadece kurumsal müşteriler için *@
                                @if (customerModel.CompanyType == CompanyType.Corporate)
                                {
                                    <div class="col-md-6">
                                        <label class="form-label required">
                                            <i class="fas fa-university me-1"></i>
                                            Vergi Dairesi
                                        </label>
                                        <SfTextBox @bind-Value="customerModel.TaxOffice"
                                                 Placeholder="Vergi dairesini giriniz"
                                                 Enabled="@(!isSaving)"
                                                 FloatLabelType="FloatLabelType.Never" />
                                        <ValidationMessage For="@(() => customerModel.TaxOffice)" class="text-danger small mt-1" />
                                    </div>
                                }

                                @* Yetkili kişi *@
                                <div class="col-md-6">
                                    <label class="form-label required">
                                        <i class="fas fa-user me-1"></i>
                                        @(customerModel.CompanyType == CompanyType.Individual ? "Ad Soyad" : "Yetkili Kişi")
                                    </label>
                                    <SfTextBox @bind-Value="customerModel.AuthorizedPersonName"
                                             Placeholder="@(customerModel.CompanyType == CompanyType.Individual ? "Ad soyadını giriniz" : "Yetkili kişinin adını giriniz")"
                                             Enabled="@(!isSaving)"
                                             FloatLabelType="FloatLabelType.Never" />
                                    <ValidationMessage For="@(() => customerModel.AuthorizedPersonName)" class="text-danger small mt-1" />
                                </div>

                                @* Telefon numarası *@
                                <div class="col-md-6">
                                    <label class="form-label required">
                                        <i class="fas fa-phone me-1"></i>
                                        Telefon Numarası
                                    </label>
                                    <SfTextBox @bind-Value="customerModel.PhoneNumber"
                                             Placeholder="0555 123 45 67"
                                             Enabled="@(!isSaving)"
                                             FloatLabelType="FloatLabelType.Never" />
                                    <ValidationMessage For="@(() => customerModel.PhoneNumber)" class="text-danger small mt-1" />
                                    <small class="form-text text-muted">
                                        Format: 0555 123 45 67 veya 05551234567
                                    </small>
                                </div>
                            </div>

                            @* Form alt butonları *@
                            <div class="row mt-4">
                                <div class="col-12">
                                    <hr />
                                    <div class="d-flex justify-content-between">
                                        <button type="button" class="btn btn-outline-secondary" 
                                               @onclick="GoBack" 
                                               disabled="@isSaving">
                                            <i class="fas fa-times me-2"></i>
                                            İptal
                                        </button>
                                        
                                        <div class="d-flex gap-2">
                                            @if (IsEditMode)
                                            {
                                                <button type="button" class="btn btn-outline-danger" 
                                                       @onclick="ConfirmDelete" 
                                                       disabled="@isSaving">
                                                    <i class="fas fa-ban me-2"></i>
                                                    Pasif Yap
                                                </button>
                                            }
                                            
                                            <button type="submit" class="btn btn-primary" disabled="@isSaving">
                                                @if (isSaving)
                                                {
                                                    <span class="spinner-border spinner-border-sm me-2"></span>
                                                    <span>Kaydediliyor...</span>
                                                }
                                                else
                                                {
                                                    <i class="fas fa-save me-2"></i>
                                                    <span>@(IsEditMode ? "Güncelle" : "Kaydet")</span>
                                                }
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </EditForm>
                    }
                </div>
            </div>
        </div>

        @* Sağ yan panel - Yardım ve öneriler *@
        <div class="col-lg-4 col-12">
            
            @* Yardım kartı *@
            <div class="card mb-4">
                <div class="card-header">
                    <h6 class="card-title mb-0">
                        <i class="fas fa-question-circle me-2"></i>
                        Yardım
                    </h6>
                </div>
                <div class="card-body">
                    <div class="help-content">
                        <div class="help-item mb-3">
                            <h6><i class="fas fa-building text-primary me-2"></i>Firma Tipi</h6>
                            <small class="text-muted">
                                Bireysel müşteriler için TCKN, kurumsal müşteriler için vergi numarası kullanılır.
                            </small>
                        </div>
                        
                        <div class="help-item mb-3">
                            <h6><i class="fas fa-id-card text-primary me-2"></i>Vergi No/TCKN</h6>
                            <small class="text-muted">
                                • TCKN: 11 haneli kimlik numarası<br/>
                                • Vergi No: 10 haneli vergi numarası
                            </small>
                        </div>
                        
                        <div class="help-item mb-3">
                            <h6><i class="fas fa-phone text-primary me-2"></i>Telefon</h6>
                            <small class="text-muted">
                                0555 123 45 67 formatında giriniz. Alanı kodu dahil olmak üzere.
                            </small>
                        </div>
                    </div>
                </div>
            </div>

            @* Düzenleme modunda istatistikler *@
            @if (IsEditMode && customerStats != null)
            {
                <div class="card">
                    <div class="card-header">
                        <h6 class="card-title mb-0">
                            <i class="fas fa-chart-bar me-2"></i>
                            Müşteri İstatistikleri
                        </h6>
                    </div>
                    <div class="card-body">
                        <div class="stats-grid">
                            <div class="stat-item">
                                <div class="stat-number text-primary">@customerStats.TotalServices</div>
                                <div class="stat-label">Toplam Servis</div>
                            </div>
                            
                            <div class="stat-item">
                                <div class="stat-number text-success">@customerStats.CompletedServices</div>
                                <div class="stat-label">Tamamlanan</div>
                            </div>
                            
                            <div class="stat-item">
                                <div class="stat-number text-info">@customerStats.ActiveServices</div>
                                <div class="stat-label">Aktif Servis</div>
                            </div>
                            
                            <div class="stat-item">
                                <div class="stat-number text-warning">@customerStats.TotalAmount.ToString("C", new System.Globalization.CultureInfo("tr-TR"))</div>
                                <div class="stat-label">Toplam Ciro</div>
                            </div>
                        </div>
                        
                        @if (customerStats.LastServiceDate.HasValue)
                        {
                            <hr class="my-3" />
                            <div class="text-center">
                                <small class="text-muted">
                                    Son Servis: @customerStats.LastServiceDate.Value.ToString("dd.MM.yyyy")
                                </small>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public int? CustomerId { get; set; }

    // Component state
    private bool isLoading = true;
    private bool isSaving = false;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private CustomerDto customerModel = new();
    private CustomerStatsDto? customerStats;

    // Properties
    private bool IsEditMode => CustomerId.HasValue && CustomerId > 0;

    // Dropdown options
    private List<CompanyTypeOption> companyTypeOptions = new()
    {
        new CompanyTypeOption { Text = "Bireysel", Value = CompanyType.Individual },
        new CompanyTypeOption { Text = "Kurumsal", Value = CompanyType.Corporate }
    };

    protected override async Task OnInitializedAsync()
    {
        // Authorization kontrolü
        if (!AuthService.IsSupervisorOrAdmin)
        {
            NavigationManager.NavigateTo("/customers");
            return;
        }

        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            if (IsEditMode)
            {
                var customer = await CustomerService.GetCustomerByIdAsync(CustomerId!.Value);
                if (customer == null)
                {
                    errorMessage = "Müşteri bulunamadı.";
                    return;
                }

                // Entity'den DTO'ya mapping
                customerModel = new CustomerDto
                {
                    Id = customer.Id,
                    CompanyName = customer.CompanyName,
                    CompanyType = customer.CompanyType,
                    TaxNumber = customer.TaxNumber,
                    TaxOffice = customer.TaxOffice,
                    AuthorizedPersonName = customer.AuthorizedPersonName,
                    PhoneNumber = customer.PhoneNumber,
                    IsActive = customer.IsActive
                };

                // İstatistikleri yükle
                customerStats = await CustomerService.GetCustomerStatsAsync(CustomerId.Value);
            }
            else
            {
                // Yeni müşteri için default değerler
                customerModel = new CustomerDto
                {
                    CompanyType = CompanyType.Individual,
                    IsActive = true
                };
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Veriler yüklenirken bir hata oluştu.";
            Console.WriteLine($"Load data error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task HandleSubmit()
    {
        isSaving = true;
        ClearMessage();
        StateHasChanged();

        try
        {
            if (IsEditMode)
            {
                var result = await CustomerService.UpdateCustomerAsync(
                    CustomerId!.Value, customerModel, AuthService.CurrentUser!.Id);
                
                if (result.IsSuccess)
                {
                    successMessage = "Müşteri başarıyla güncellendi.";
                    await Task.Delay(1500);
                    NavigationManager.NavigateTo("/customers");
                }
                else
                {
                    errorMessage = result.ErrorMessage!;
                }
            }
            else
            {
                var result = await CustomerService.CreateCustomerAsync(
                    customerModel, AuthService.CurrentUser!.Id);
                
                if (result.IsSuccess)
                {
                    successMessage = "Müşteri başarıyla oluşturuldu.";
                    await Task.Delay(1500);
                    NavigationManager.NavigateTo("/customers");
                }
                else
                {
                    errorMessage = result.ErrorMessage!;
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = "İşlem sırasında bir hata oluştu.";
            Console.WriteLine($"Submit error: {ex.Message}");
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private async Task OnCompanyTypeChanged(ChangeEventArgs<CompanyType, CompanyTypeOption> args)
    {
        customerModel.CompanyType = args.Value;
        
        // Firma tipi değiştiğinde vergi dairesi alanını temizle
        if (args.Value == CompanyType.Individual)
        {
            customerModel.TaxOffice = null;
        }
        
        StateHasChanged();
    }

    private async Task ConfirmDelete()
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
            "Bu müşteriyi pasif hale getirmek istediğinizden emin misiniz?");
        
        if (confirmed)
        {
            try
            {
                var result = await CustomerService.DeactivateCustomerAsync(
                    CustomerId!.Value, AuthService.CurrentUser!.Id);
                
                if (result.IsSuccess)
                {
                    successMessage = "Müşteri başarıyla pasif hale getirildi.";
                    await Task.Delay(1500);
                    NavigationManager.NavigateTo("/customers");
                }
                else
                {
                    errorMessage = result.ErrorMessage!;
                }
            }
            catch (Exception ex)
            {
                errorMessage = "İşlem sırasında bir hata oluştu.";
            }
        }
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/customers");
    }

    private void ClearMessage()
    {
        errorMessage = string.Empty;
        successMessage = string.Empty;
    }

    // Helper class for dropdown
    public class CompanyTypeOption
    {
        public string Text { get; set; } = string.Empty;
        public CompanyType Value { get; set; }
    }
}