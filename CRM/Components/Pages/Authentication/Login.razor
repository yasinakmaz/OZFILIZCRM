@page "/login"
@layout AuthLayout
@using CRM.DTOs
@using CRM.Services
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject ILogger<Login> Logger

<PageTitle>Giriş Yap - Teknik Servis CRM</PageTitle>

<div class="login-container fade-in">
    <EditForm Model="@loginModel" OnValidSubmit="@HandleLogin" class="login-form">
        <DataAnnotationsValidator />
        
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger" role="alert">
                <i class="fas fa-exclamation-triangle me-2"></i>
                @errorMessage
                <button type="button" class="btn-close float-end" @onclick="ClearMessage"></button>
            </div>
        }

        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="alert alert-success" role="alert">
                <i class="fas fa-check-circle me-2"></i>
                @successMessage
                <button type="button" class="btn-close float-end" @onclick="ClearMessage"></button>
            </div>
        }

        <div class="form-group mb-3">
            <label for="username" class="form-label">
                <i class="fas fa-user me-2"></i>
                Kullanıcı Adı
            </label>
            <InputText @bind-Value="loginModel.Username" 
                      class="form-control" 
                      id="username" 
                      placeholder="Kullanıcı adınızı girin"
                      disabled="@isLoading" />
            <ValidationMessage For="@(() => loginModel.Username)" class="text-danger small" />
        </div>

        <div class="form-group mb-3">
            <label for="password" class="form-label">
                <i class="fas fa-lock me-2"></i>
                Şifre
            </label>
            <div class="input-group">
                <InputText @bind-Value="loginModel.Password" 
                          type="@(showPassword ? "text" : "password")"
                          class="form-control" 
                          id="password" 
                          placeholder="Şifrenizi girin"
                          disabled="@isLoading" />
                <button type="button" 
                        class="btn btn-outline-secondary" 
                        @onclick="TogglePasswordVisibility"
                        disabled="@isLoading">
                    <i class="fas @(showPassword ? "fa-eye-slash" : "fa-eye")"></i>
                </button>
            </div>
            <ValidationMessage For="@(() => loginModel.Password)" class="text-danger small" />
        </div>

        <div class="form-check mb-4">
            <InputCheckbox @bind-Value="loginModel.RememberMe" 
                          class="form-check-input" 
                          id="rememberMe"
                          disabled="@isLoading" />
            <label class="form-check-label" for="rememberMe">
                Beni Hatırla
            </label>
        </div>

        <button type="submit" 
                class="btn btn-primary w-100 mb-3" 
                disabled="@isLoading">
            @if (isLoading)
            {
                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                <span>Giriş yapılıyor...</span>
            }
            else
            {
                <i class="fas fa-sign-in-alt me-2"></i>
                <span>Giriş Yap</span>
            }
        </button>

        @if (isDevelopment)
        {
            <div class="development-info">
                <hr class="my-4">
                <h6 class="text-muted mb-3">
                    <i class="fas fa-code me-2"></i>
                    Development - Test Hesapları
                </h6>
                
                <div class="row">
                    <div class="col-md-6 mb-2">
                        <button type="button" 
                                class="btn btn-outline-info btn-sm w-100" 
                                @onclick="() => FillCredentials('admin', 'Admin123!')"
                                disabled="@isLoading">
                            <i class="fas fa-user-shield me-1"></i>
                            Admin Girişi
                        </button>
                    </div>
                    <div class="col-md-6 mb-2">
                        <button type="button" 
                                class="btn btn-outline-success btn-sm w-100" 
                                @onclick="() => FillCredentials('teknisyen1', 'Tech123!')"
                                disabled="@isLoading">
                            <i class="fas fa-tools me-1"></i>
                            Teknisyen Girişi
                        </button>
                    </div>
                </div>
                
                <div class="mt-2">
                    <small class="text-muted">
                        <i class="fas fa-info-circle me-1"></i>
                        Bu alan sadece development ortamında görünür
                    </small>
                </div>
            </div>
        }
    </EditForm>
</div>

<style>
    .login-container {
        max-width: 400px;
        margin: 0 auto;
    }

    .login-form {
        background: white;
        padding: 2rem;
        border-radius: 15px;
        box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        backdrop-filter: blur(10px);
    }

    .development-info {
        background: rgba(23, 162, 184, 0.1);
        padding: 1rem;
        border-radius: 8px;
        border: 1px solid rgba(23, 162, 184, 0.2);
    }

    .form-control:focus {
        border-color: #007bff;
        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
    }

    .btn-primary {
        background: linear-gradient(45deg, #007bff, #0056b3);
        border: none;
        transition: all 0.3s ease;
    }

    .btn-primary:hover:not(:disabled) {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0, 123, 255, 0.3);
    }

    @media (max-width: 576px) {
        .login-container {
            padding: 15px;
        }

        .login-form {
            padding: 1.5rem;
        }
    }
</style>

@code {
    private LoginDto loginModel = new();
    private bool isLoading = false;
    private bool showPassword = false;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private bool isDevelopment = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
#if DEBUG
            isDevelopment = true;
#endif

            // Daha önce kaydedilmiş giriş bilgilerini kontrol et
            var savedCredentials = await AuthService.GetSavedCredentialsAsync();
            if (savedCredentials != null)
            {
                loginModel = new LoginDto
                {
                    Username = savedCredentials.Username,
                    Password = savedCredentials.Password,
                    RememberMe = savedCredentials.RememberMe
                };
                successMessage = "Kaydedilmiş giriş bilgileriniz yüklendi.";
            }

            // Eğer kullanıcı zaten giriş yapmışsa dashboard'a yönlendir
            if (AuthService.IsAuthenticated)
            {
                NavigationManager.NavigateTo("/", forceLoad: true);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error initializing login page");
            errorMessage = "Başlatma sırasında bir hata oluştu. Lütfen sayfayı yenileyin.";
        }
    }

    private async Task HandleLogin()
    {
        if (isLoading) return;

        try
        {
            isLoading = true;
            errorMessage = string.Empty;
            successMessage = string.Empty;
            StateHasChanged();

            Logger.LogInformation("Login attempt for user: {Username}", loginModel.Username);

            var result = await AuthService.LoginAsync(loginModel);

            if (result.IsSuccess)
            {
                successMessage = "Giriş başarılı! Yönlendiriliyorsunuz...";
                StateHasChanged();

                // Authentication state'i güncelle
                var authStateProvider = (CustomAuthenticationStateProvider)(AuthenticationStateProvider)
                    Navigation.NavigationManager.ToBaseRelativePath(Navigation.Uri);

                await Task.Delay(1000); // Success mesajını göster
                NavigationManager.NavigateTo("/", forceLoad: true);
            }
            else
            {
                errorMessage = result.ErrorMessage ?? "Giriş işlemi başarısız.";
                Logger.LogWarning("Login failed for user: {Username}. Error: {Error}", 
                    loginModel.Username, result.ErrorMessage);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Login error for user: {Username}", loginModel.Username);
            errorMessage = "Giriş işlemi sırasında bir hata oluştu. Lütfen tekrar deneyin.";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }

    private void FillCredentials(string username, string password)
    {
        loginModel.Username = username;
        loginModel.Password = password;
        loginModel.RememberMe = false;
        StateHasChanged();
    }

    private void ClearMessage()
    {
        errorMessage = string.Empty;
        successMessage = string.Empty;
        StateHasChanged();
    }
}