@page "/"
@page "/dashboard"
@using CRM.DTOs
@using CRM.Services
@attribute [Authorize]
@inject IDashboardService DashboardService
@inject IServiceManagementService ServiceService
@inject ILogger<Dashboard> Logger
@inject IJSRuntime JSRuntime

<PageTitle>Dashboard - Teknik Servis CRM</PageTitle>

<div class="dashboard-container">
    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" style="width: 3rem; height: 3rem;" role="status">
                <span class="visually-hidden">Yükleniyor...</span>
            </div>
            <h5 class="mt-3 text-muted">Dashboard yükleniyor...</h5>
        </div>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger" role="alert">
            <h4 class="alert-heading">
                <i class="fas fa-exclamation-triangle me-2"></i>
                Dashboard Yüklenemedi
            </h4>
            <p>@errorMessage</p>
            <hr>
            <button class="btn btn-outline-danger" @onclick="LoadDashboardData">
                <i class="fas fa-redo me-2"></i>
                Tekrar Dene
            </button>
        </div>
    }
    else
    {
        <!-- Welcome Section -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="welcome-card">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h2 class="text-primary mb-2">
                                <i class="fas fa-tachometer-alt me-2"></i>
                                Dashboard
                            </h2>
                            <AuthorizeView>
                                <p class="text-muted mb-0">
                                    Hoş geldiniz, <strong>@context.User.FindFirst("FullName")?.Value</strong>
                                </p>
                            </AuthorizeView>
                        </div>
                        <div class="text-end">
                            <small class="text-muted">
                                Son güncelleme: @dashboardData?.LastUpdated.ToString("HH:mm")
                            </small>
                            <br>
                            <button class="btn btn-outline-primary btn-sm mt-1" @onclick="RefreshDashboard">
                                <i class="fas fa-sync-alt me-1"></i>
                                Yenile
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Stats Cards -->
        <div class="row mb-4">
            <div class="col-xl-3 col-lg-6 col-md-6 mb-3">
                <div class="stats-card bg-primary">
                    <div class="stats-icon">
                        <i class="fas fa-cogs"></i>
                    </div>
                    <div class="stats-content">
                        <h3>@dashboardData?.ServiceStats.TotalServices</h3>
                        <p>Toplam Servis</p>
                    </div>
                </div>
            </div>

            <div class="col-xl-3 col-lg-6 col-md-6 mb-3">
                <div class="stats-card bg-warning">
                    <div class="stats-icon">
                        <i class="fas fa-clock"></i>
                    </div>
                    <div class="stats-content">
                        <h3>@dashboardData?.ServiceStats.PendingServices</h3>
                        <p>Bekleyen Servis</p>
                    </div>
                </div>
            </div>

            <div class="col-xl-3 col-lg-6 col-md-6 mb-3">
                <div class="stats-card bg-info">
                    <div class="stats-icon">
                        <i class="fas fa-play"></i>
                    </div>
                    <div class="stats-content">
                        <h3>@dashboardData?.ServiceStats.InProgressServices</h3>
                        <p>Devam Eden</p>
                    </div>
                </div>
            </div>

            <div class="col-xl-3 col-lg-6 col-md-6 mb-3">
                <div class="stats-card bg-success">
                    <div class="stats-icon">
                        <i class="fas fa-check"></i>
                    </div>
                    <div class="stats-content">
                        <h3>@dashboardData?.ServiceStats.CompletedServices</h3>
                        <p>Tamamlanan</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Charts and Tables Row -->
        <div class="row">
            <!-- Revenue Chart -->
            <div class="col-lg-8 mb-4">
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title">
                            <i class="fas fa-chart-line me-2"></i>
                            Gelir Trendi
                        </h5>
                    </div>
                    <div class="card-body">
                        @if (dashboardData?.RevenueChart?.Values?.Any() == true)
                        {
                            <canvas id="revenueChart" style="height: 300px;"></canvas>
                        }
                        else
                        {
                            <div class="text-center py-4">
                                <i class="fas fa-chart-line fa-3x text-muted mb-3"></i>
                                <p class="text-muted">Henüz gelir verisi bulunmuyor.</p>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <!-- Service Status Chart -->
            <div class="col-lg-4 mb-4">
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title">
                            <i class="fas fa-chart-pie me-2"></i>
                            Servis Durumları
                        </h5>
                    </div>
                    <div class="card-body">
                        @if (dashboardData?.ServiceStatusChart?.Values?.Any() == true)
                        {
                            <canvas id="statusChart" style="height: 300px;"></canvas>
                        }
                        else
                        {
                            <div class="text-center py-4">
                                <i class="fas fa-chart-pie fa-3x text-muted mb-3"></i>
                                <p class="text-muted">Durum verisi yok.</p>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- Recent Services -->
        <div class="row">
            <div class="col-lg-8 mb-4">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">
                            <i class="fas fa-history me-2"></i>
                            Son Servisler
                        </h5>
                        <a href="/services" class="btn btn-outline-primary btn-sm">
                            <i class="fas fa-eye me-1"></i>
                            Tümünü Gör
                        </a>
                    </div>
                    <div class="card-body p-0">
                        @if (dashboardData?.RecentServices?.Any() == true)
                        {
                            <div class="table-responsive">
                                <table class="table table-hover mb-0">
                                    <thead>
                                        <tr>
                                            <th>Servis</th>
                                            <th>Müşteri</th>
                                            <th>Durum</th>
                                            <th>Tarih</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var service in dashboardData.RecentServices.Take(5))
                                        {
                                            <tr>
                                                <td>
                                                    <a href="/services/@service.Id" class="text-decoration-none">
                                                        <strong>@service.ServiceNumber</strong>
                                                        <br>
                                                        <small class="text-muted">@service.Title</small>
                                                    </a>
                                                </td>
                                                <td>
                                                    <span>@service.CustomerName</span>
                                                </td>
                                                <td>
                                                    <span class="badge @GetStatusBadgeClass(service.Status)">
                                                        @GetStatusDisplayName(service.Status)
                                                    </span>
                                                </td>
                                                <td>
                                                    <small>@service.CreatedDate.ToString("dd.MM.yyyy")</small>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                        else
                        {
                            <div class="text-center py-4">
                                <i class="fas fa-inbox fa-3x text-muted mb-3"></i>
                                <p class="text-muted">Henüz servis kaydı bulunmuyor.</p>
                                <a href="/services/new" class="btn btn-primary">
                                    <i class="fas fa-plus me-1"></i>
                                    İlk Servisi Oluştur
                                </a>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <!-- Quick Actions -->
            <div class="col-lg-4 mb-4">
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title">
                            <i class="fas fa-bolt me-2"></i>
                            Hızlı İşlemler
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="d-grid gap-2">
                            <a href="/services/new" class="btn btn-primary">
                                <i class="fas fa-plus me-2"></i>
                                Yeni Servis
                            </a>
                            <a href="/customers/new" class="btn btn-success">
                                <i class="fas fa-user-plus me-2"></i>
                                Yeni Müşteri
                            </a>
                            <a href="/services?status=pending" class="btn btn-warning">
                                <i class="fas fa-clock me-2"></i>
                                Bekleyen Servisler
                            </a>
                            <a href="/reports" class="btn btn-info">
                                <i class="fas fa-chart-bar me-2"></i>
                                Raporlar
                            </a>
                        </div>

                        @if (dashboardData?.OverdueServices?.Any() == true)
                        {
                            <hr>
                            <div class="alert alert-warning" role="alert">
                                <h6 class="alert-heading">
                                    <i class="fas fa-exclamation-triangle me-2"></i>
                                    Dikkat!
                                </h6>
                                <p class="mb-2">@dashboardData.OverdueServices.Count() geciken servis var.</p>
                                <a href="/services?overdue=true" class="btn btn-outline-warning btn-sm">
                                    <i class="fas fa-eye me-1"></i>
                                    Gecikenleri Gör
                                </a>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<style>
    .dashboard-container {
        animation: fadeIn 0.5s ease-out;
    }

    .welcome-card {
        background: linear-gradient(135deg, #fff 0%, #f8f9fa 100%);
        padding: 1.5rem;
        border-radius: 15px;
        border: 1px solid #e9ecef;
        box-shadow: 0 2px 10px rgba(0,0,0,0.05);
    }

    .stats-card {
        background: linear-gradient(135deg, var(--bs-primary) 0%, var(--bs-primary) 100%);
        color: white;
        padding: 1.5rem;
        border-radius: 15px;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .stats-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 25px rgba(0,0,0,0.15);
    }

    .stats-card.bg-primary {
        background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
    }

    .stats-card.bg-success {
        background: linear-gradient(135deg, #28a745 0%, #1e7e34 100%);
    }

    .stats-card.bg-warning {
        background: linear-gradient(135deg, #ffc107 0%, #e0a800 100%);
        color: #212529;
    }

    .stats-card.bg-info {
        background: linear-gradient(135deg, #17a2b8 0%, #138496 100%);
    }

    .stats-icon {
        font-size: 2rem;
        opacity: 0.8;
    }

    .stats-content h3 {
        font-size: 2rem;
        font-weight: bold;
        margin: 0;
    }

    .stats-content p {
        margin: 0;
        opacity: 0.9;
        font-size: 0.9rem;
    }
</style>

@code {
    private DashboardDto? dashboardData;
    private bool isLoading = true;
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadDashboardData();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && dashboardData != null)
        {
            await RenderChartsAsync();
        }
    }

    private async Task LoadDashboardData()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;
            StateHasChanged();

            // Get current user ID from auth context
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var userIdClaim = authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier);
            
            if (userIdClaim != null && int.TryParse(userIdClaim.Value, out var userId))
            {
                var result = await DashboardService.GetDashboardDataAsync(userId);
                
                if (result.IsSuccess)
                {
                    dashboardData = result.Data;
                    Logger.LogInformation("Dashboard data loaded successfully for user: {UserId}", userId);
                }
                else
                {
                    errorMessage = result.ErrorMessage ?? "Dashboard verileri yüklenemedi.";
                    Logger.LogError("Failed to load dashboard data: {Error}", result.ErrorMessage);
                }
            }
            else
            {
                errorMessage = "Kullanıcı bilgisi alınamadı.";
                Logger.LogError("Unable to get user ID from authentication context");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading dashboard data");
            errorMessage = "Dashboard yüklenirken beklenmedik bir hata oluştu.";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task RefreshDashboard()
    {
        await LoadDashboardData();
        
        if (dashboardData != null)
        {
            await RenderChartsAsync();
        }
    }

    private async Task RenderChartsAsync()
    {
        try
        {
            if (dashboardData?.RevenueChart?.Values?.Any() == true)
            {
                await JSRuntime.InvokeVoidAsync("renderLineChart", 
                    "revenueChart", 
                    dashboardData.RevenueChart.Labels, 
                    dashboardData.RevenueChart.Values);
            }

            if (dashboardData?.ServiceStatusChart?.Values?.Any() == true)
            {
                await JSRuntime.InvokeVoidAsync("renderDoughnutChart", 
                    "statusChart", 
                    dashboardData.ServiceStatusChart.Labels, 
                    dashboardData.ServiceStatusChart.Values,
                    dashboardData.ServiceStatusChart.Colors);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error rendering charts");
        }
    }

    private static string GetStatusBadgeClass(ServiceStatus status)
    {
        return status switch
        {
            ServiceStatus.Pending => "bg-warning text-dark",
            ServiceStatus.Accepted => "bg-info",
            ServiceStatus.InProgress => "bg-primary",
            ServiceStatus.WaitingForParts => "bg-secondary",
            ServiceStatus.Testing => "bg-info",
            ServiceStatus.Completed => "bg-success",
            ServiceStatus.Cancelled => "bg-secondary",
            ServiceStatus.Rejected => "bg-danger",
            _ => "bg-secondary"
        };
    }

    private static string GetStatusDisplayName(ServiceStatus status)
    {
        return status switch
        {
            ServiceStatus.Pending => "Beklemede",
            ServiceStatus.Accepted => "Kabul Edildi",
            ServiceStatus.InProgress => "Devam Ediyor",
            ServiceStatus.WaitingForParts => "Parça Bekleniyor",
            ServiceStatus.Testing => "Test Ediliyor",
            ServiceStatus.Completed => "Tamamlandı",
            ServiceStatus.Cancelled => "İptal Edildi",
            ServiceStatus.Rejected => "Reddedildi",
            _ => status.ToString()
        };
    }
}
